1
The Information Processing Factory: Organization, Terminology, and Deﬁnitions
Eberle A. Rambo, Bryan Donyanavard, Minjun Seo, Florian Maurer, Thawra Kadeed, Caio B. de Melo, Biswadip Maity, Anmol Surhonne, Andreas Herkersdorf, Fadi Kurdahi, Nikil Dutt, and Rolf Ernst

arXiv:1907.01578v1 [cs.DC] 2 Jul 2019

!

1 INTRODUCTION

T HE Information Processing Factory (IPF) project has recently introduced the abstraction of complex architectures as self-aware information processing factories [1], [2]. These factories consist of a set of highly conﬁgurable resources, e.g., processing elements and interconnects, whose use is monitored, planned, and conﬁgured during runtime. Managing a factory involves multiple facets, such as efﬁciency, availability, reliability, integrity, and timing. IPF conquers the complexity of managing facets in digital systems by hierarchically decomposing the challenges and addressing them with different co-existing entities in the factory.
This paper introduces the organization, terminology, and deﬁnitions of IPF. Section 2 describes IPF’s ﬁve-layer hierarchical organization and a system conﬁguration framework that enable self-awareness, self-diagnosis, self-organization, and self-optimization in mixed-critical real-time embedded systems. Section 3 deﬁnes imminent hazards, which are threats to the system operation that can be handled by IPF before they can cause system failure. Section 4 concludes the paper.
2 IPF’S 5-LAYER ORGANIZATION
IPF is a metaphor for self-aware, self-organizing, mixedcritical systems. IPF provides an infrastructure for system introspection and reﬂective behavior, which is the foundation for computational self-awareness. Computational selfawareness is the ability of a computing system to recognize its own state, possible actions and the result of these actions on itself, its operational goals, and its environment, thereby empowering the system to become autonomous [3]. An IPF
• E. A. Rambo, T. Kadeed, and R. Ernst are with Institute of Computer and Network Engineering, Technische Universita¨t Braunschweig, Braunschweig, Germany. E-mails: rambo@ida.ing.tu-bs.de, kadeed@ida.ing.tu-bs.de, and ernst@ida.ing.tu-bs.de
• B. Donyanavard, M. Seo, C. B. de Melo, B. Maity, N. Dutt, and F. Kurdahi are with Center for Embedded and Cyber-physical Systems (CECS), University of California, Irvine, USA. E-mails: bdonyana@uci.edu, minjun.seo@uci.edu, cbatista@uci.edu, maityb@uci.edu, dutt@ics.uci.edu, and kurdahi@uci.edu
• F. Maurer, A. Surhonne, and A. Herkersdorf are with Chair for Integrated Systems, Technische Universita¨t Mu¨ nchen, Mu¨ nchen, Germany. E-mails: ﬂo.maurer@tum.de, anmol.surhonne@tum.de, and herkersdorf@tum.de

system consists of a set of highly conﬁgurable resources whose use is planned, conﬁgured, monitored, and optimized at runtime. The system resources are allocated to the execution of mixed-critical workloads. Thus, not only must the factory manage resources and workload at runtime, it must do so while ensuring that the requirements of the safety-critical functions of the workload are not violated. IPF addresses that challenge with two levels of awareness: a ﬁrst level with local, autonomous actions and a second level with a global view of the system. Together, they ensure the adaptability, safety, and dependability of the mixed-critical system throughout its execution.
Resembling a factory1, IPF is organized in ﬁve layers, as illustrated in Figure 1. The workload execution occurs in the production line (layer 1), which contains the system resources and the mixed-critical workload. The workload executes within the infrastructure and execution model of the process support (layer 2), which provides basic execution support such as the operating systems (OSs), real-time operating systems (RTOSs), and the runtime environments (RTEs). The resources’ statuses are monitored and the workload execution is optimized by the supervisory process control (layer 3), which acts locally and autonomously within boundaries speciﬁed by the layers above. The manufacturing execution control (layer 4) is responsible for enforcing safe system conﬁgurations by globally monitoring, assessing risks and controlling the layers below, under the guidance of the top layer. The enterprise resource planning (layer 5) is responsible for long-term planning of IPF. It plans future proactive and reactive actions, taking into account the operating conditions of the system, assessing risks and impacts of short-term factors such as error rates, energy consumption, workload variations; and long-term factors such as aging, energy constraints, and changes in the workload, qualityof-service (QoS) goals, and non-functional constraints. Note that, in the absence of the top three layers, layers 1 and 2 compose the original non-self-aware system.
2.1 Production Line (Layer 1)
The lowest layer of IPF is responsible for the workload execution. Depicted in Figure 1, the production line consists of the system resources and the mixed-critical workload.
1. Terminology inspired by enterprise control systems [4].

2

IPF
Resources

Enterprise Resource Planning - Long-term planning
Planner
Layer 5

SC

Manufacturing Execution Control

- Plan execution and resource configuration (SC)

BEC

- Plan enforcement (BEC)

Layer 4

TAL LCT

Supervisory Process Control - BE workload execution optimization (LCT) - Sensing (LCT, TAL)

Layer 3

RTE

OS

RTOS

Process Support - Basic workload execution support (RTEs, OSs, RTOSs)

Layer 2

Workload

BE

BE

SC

Production Line - Resources (processing, shared) - Mixed-critical workload (SC, BE)

Fig. 1. IPF’s ﬁve-layer organization.

Layer 1

The mixed-critical workload consists of a best-effort (BE) component and a safety-critical (SC) component. The BE workload is characterized by its goals, and the SC workload is characterized by its non-functional requirements. The BE workload has application-speciﬁc QoS, such as achieved throughput, and also has system constraints such as power budget. The SC workload has requirements, such as period, worst-case execution time (WCET), deadline, maximum downtime, maximum failure in time (FIT), and data consistency. Different levels of criticality [5] as deﬁned in safety standards [6], [7], [8] are also supported. The ﬁve usual levels of criticality – e.g., Automotive Safety Integrity Levels (ASILs) A through D plus QM, are captured by the different requirements of the workload. For simplicity and without loss of generality, throughout the paper we refer to the two representative levels: BE and SC.
Processing resources are highly conﬁgurable and characterized by their properties – e.g., operating frequencies, power consumption, temperature, and error rates. They can consist of a single or multiple cores in a cluster. Processing resources can be used for executing either BE or SC workload. Therefore, IPF requires them to have a safety-critical mode where the execution is deterministic, predictable, and enables minimum performance guarantees for applications that require it – i.e., the SC workload. For BE workload execution, processing resources can enable non-predictable features, such as caches in the memory hierarchy and dynamic voltage and frequency scaling (DVFS). Shared resources must provide predictable and deterministic service and ensure sufﬁcient independence2 between different criticalities [7], thereby enabling minimum performance guarantees for the SC workload. The resources are conﬁgured by the manufacturing execution control (layer 3), which enables and disables conﬁgurable features according to the executing
2. Also known as freedom from interference [6].

workload. Processing resources in IPF have ﬁve different states and
two superstates, as illustrated in Figure 2. A processing resource can either be operational or non-operational. When operational, a processing resource can be allocated to the SC workload execution or the BE workload execution. In the former case, the respective processing resource belongs to the SC zone, and in the latter, to the BE zone. When non-operational, e.g., due to errors, the processing resource can be either under maintenance or failed. If a processing resource is under maintenance, IPF attempts to ﬁnd a conﬁguration under which the resource can still be employed. When failed, the resource is no longer usable. The resource planning is done in layer 5. The resource management is done at layer 4, which is responsible for the different transitions. Shared resources are managed similarly and serve both SC and BE zones.

Operational
SC zone Available
BE zone

Non-operational

Under mainten
ance

Failed/ disabled

SC SC+BEC

Fig. 2. Resource states: resource planning is done in layer 5, resource management (state transitions) is done in layer 4.

2.2 Process Support (Layer 2)
The second layer of IPF is responsible for basic workload execution support and the execution model. The process support comprises elements such as OSs, RTOSs, and RTEs, as illustrated in Figure 1. Notice that the lowest two layers

3

alone comprise a regular mixed-critical system without any self-* properties.
For modularity and to enable predictable dynamicity at runtime, the execution model of IPF is based on containers. A container encapsulates a (sub)set of either SC or BE workload, and is referred to as an SC container or a BE container, respectively. A container also includes an RTE with OS or RTOS, and a software stack. Each container is mapped to a processing resource, which is associated with a single container – i.e., there exists a strict one-to-one mapping between containers and processing resources. The mapping of workload to containers and the mapping of containers to resources are speciﬁed in Operating Regions (ORs), to be introduced in Section 2.3. At runtime, the workload can be redistributed among different containers, and containers can be moved between resources, e.g., with workload balancing and migration techniques. That can be carried out by entities in layers 4 and 5 by means of transitions between ORs.
2.3 Operating Regions and Operating Points
Before advancing to the next layers, we deﬁne the concepts of ORs and Operating Points (OPs). The vision for OPs was introduced in [2]. Here, we apply the concept in a framework for conﬁguring and managing the system. The framework consists of ORs and OPs. An OR is a conﬁguration of the system with room for small changes. Small changes are carried out by changing the OPs inside it. Larger changes are carried out by changing the OR.
An OR represents a conﬁguration of the system where the mixed-critical workload (including goals and requirements), its mapping to BE and SC containers, the mapping of containers to resources, and the conﬁguration of the shared resources are ﬁxed. In an OR, the conﬁguration of the containers and the associated processing resources (in the BE zone) can be varied. What can be varied depends on the speciﬁc instance of IPF and on the underlying hardware. How much it can be varied, i.e., the conﬁguration range, is determined at runtime in layer 5, introduced in Section 2.6. Both what can be varied and how much it can be varied are speciﬁed in the OR. The intuition behind ORs is that they represent valid system conﬁgurations where the system is predictable and safe for executing the SC workload, while still providing safely bounded ﬂexibility for local optimizations of the execution of BE workload.
An OP is a speciﬁc conﬁguration within an OR. It can also be decomposed in two components, and be deﬁned as a pair: OP = (OPSC ,OPBE). The OPBE represents a speciﬁc conﬁguration of the BE zone, and OPSC represents a speciﬁc conﬁguration of the SC zone. The concept is illustrated in the top left quadrant of Figure 3b, where there are multiple operating points within a region. The intuition behind OPs is that they represent a speciﬁc, valid conﬁguration at any given point in time within an OR.
As illustrated in Figure 3b, the system starts at an initial, valid OR, named Current Operating Region (COR). A number of autonomous actions can be performed locally by the system, which move the OP around inside the COR. Whenever an event occurs in IPF that requires bigger changes to the conﬁguration, IPF handles it by transitioning to a new OR, named Next Operating Region (NOR). A suitable NOR

is chosen from a set N of NORs and IPF then reconﬁgures the system according to the selected NOR, which becomes the COR. Then, the set N of NORs becomes empty and new, valid NORs must be created and added to N .
Events can be triggered due to different reasons, such as:
• anticipated violation of the requirements of the safetycritical workload, i.e., a hazard;
• pursuit of long-term optimization goals; • changes in the workload, its goals and requirements; • changes in the environmental conditions; • changes in the operating conditions.
Events are generated by the entities in layers 3 and 4 and will be introduced in the respective layers.
2.4 Supervisory Process Control (Layer 3)
The supervisory process control is responsible for monitoring and autonomously optimizing the workload execution. It is also responsible for gathering useful information about the production line that supports the upper layers’ longterm planning and execution. Supervisory process control components carry out actions that directly modify the conﬁguration of the system by changing its OP. As illustrated in Figure 1, the layer comprises the IPF infrastructure components Trace Abstraction Layer (TAL) and Learning Classiﬁer Table (LCT).
TAL is responsible for monitoring the system for errors. TAL is a source of events that trigger OR transitions. TAL performs runtime veriﬁcation based on processor tracing. It checks the execution of the workload against contracts (system requirements) described as Timed Automata (TA) models. The contracts are loaded into TAL, which continuously monitors the system at runtime. TALs operate in both BE and SC containers.
The LCT is responsible for optimizing the execution of the BE workload towards achieving goals. LCTs [9] are rule-based reinforcement learning engines that explore and optimize conﬁgurations within the COR. They operate only within BE containers. LCTs collect periodic sensor data to update the ﬁtness of rules and determine the action for the next period. First, based on the effect of the previous action toward achieving an objective, the LCT updates the rule ﬁtness for the previous period using a version of Q-learning. Second, based on the current state and rule ﬁtnesses, the LCT applies an action to conﬁgure the system for the upcoming period by changing the OP within the COR (cf. Section 2.3). LCTs and TALs are conﬁgured and maintained by layer 3.
2.5 Manufacturing Execution Control (Layer 4)
In the factory analogy, the manufacturing execution control is responsible for the global monitoring, risk assessment, and control of the system. It monitors the layers below with the support of layer 3 and controls them by means of the ORs provided by the enterprise resource planning (layer 5). Changes to the system conﬁguration initiated by this layer are seen as big changes and are realized with transitions from a COR to a NOR (cf. Section 2.3).
As illustrated in Figure 1, the layer comprises two entities: the best-effort controller (BEC) and the system controller

4

SC
1

9

10

Mixed-critical workload
2

4

3

5 6

8

7

BE 12
12 11 13 16
14 15 17 18 19

Operating Operating Region (OR) Point (OP)

Composition, goals & reqs

Fixed

Fixed

Mapping

Fixed

Fixed

Containers

SC

Processing resources
Shared resources

SC

SC

BE

BE

BE

SC zone

BE zone

Configuration Variable Fixed

Mapping

Fixed

Fixed

Configuration Variable Fixed

Configuration Fixed

Fixed

(a) Deﬁning ORs and OPs

+
+ +

+ + +

+
COR

+
COR

OPSC + OPBE

+

α

NOR

γ'|α

β

+

γ NOR

γ'|β

...

+

NOR

γ'|γ

Set N

of NORs

(b) ORs, OPs, and events

Fig. 3. Operating regions: Current Operating Region (COR) and the set of Next Operating Region (NOR), triggered by different events (α, β, and γ). An operating region can have multiple valid Operating Points (OPs).

(SC). SC monitors and controls the safety-critical part of the system (the SC zone) as well as the shared resources according to the COR. BEC monitors and controls the besteffort part of the system, the BE zone, according to the COR. SC coordinates the control of the BE zone with BEC, but for safety, SC has ultimate control over the entire system.
The SC is responsible for conﬁguring the system according to the COR. It conﬁgures the resources and the entities in the lower layers of IPF, loads the SC and BE containers onto the respective resources, and conﬁgures the shared resources as speciﬁed by the COR. The BEC is responsible for conﬁguring the resources and entities in the BE zone according to the COR, and ensures that the autonomous actions carried out in the lower layers are within the speciﬁcation of the COR.
Both entities globally monitor the system, assess risks, and proactively and reactively act to changes in the system or environment. These proactive and reactive measures in the system are triggered by events (cf. Section 2.3), which trigger big changes in the conﬁguration of the system. Events are generated either in layer 3 or in this layer. SC monitors the system for changes in the environmental or operating conditions that impact the execution of the SC workload. Similarly, BEC monitors the BE zone for changes in the system or environment that impacts the execution of the BE workload. Events refer to, for example, changes in the BE workload and its goals, changes in the SC workload and its requirements, or the failure of a processing resource, which will be reactively handled in IPF. An event can also refer to a predicted change that will be proactively handled by IPF, such as the imminent failure of a processing resource. Because changes in the global system conﬁguration impact the SC workload execution, SC is responsible for handling all events, including events that occur in the BE zone, which are forwarded by BEC to SC. Handling the event means transitioning from the COR to a suitable NOR associated with that event.
Transitions from the COR to NORs are carried out by SC with the collaboration of BEC. Such transitions can include changes to the conﬁguration of a single resource or can include a complete change in the mapping of workload

to containers and their mapping to resources. During a transition, in addition to the above-described conﬁguration responsibilities, resources can be added and removed from the SC and BE zones. The management of a resource’s state by the SC and BEC controllers is illustrated in Figure 2, where solid-arrow changes to the resource state involve only SC, and dashed-arrow transitions involve both SC and BEC. When the SC and BE zones are resized, i.e., resources are added to or removed from a zone, a controller appropriately releases its resources before handing them over to the other one – e.g., BEC removes a resource from the BE zone before handing it over to SC to be added to the SC zone. Notice that the transition of a resource from BE zone to SC zone in Figure 2 is timing critical. Therefore, SC is allowed to forcefully execute that transition without BEC, in case the latter takes too long to release it, in order to make the execution of the SC workload independent of the execution of the BE workload (sufﬁcient independence). Shared resources are conﬁgured by SC since they must comply with the highest levels of criticality [6], and they must be reconﬁgured before any BE containers can resume execution in order to ensure sufﬁcient independence and prevent unexpected interference on the execution of the SC workload. Note that the time to transition between ORs varies depending on the amount of reconﬁguration involved.
When an event occurs for which there is no associated NOR, the reaction of IPF depends on the event. The possible scenarios are summarized in Table 1. In case the event is related to the execution of the SC workload, the system must signal its failure before the non-functional properties of the workload are violated. The failure is either reported immediately if the event concerns a reactive measure, or it can be deferred to when the failure actually occurs if the event concerns a proactive measure. If the event is related to the execution of BE workload, the system continues operating albeit with limited QoS, which can be optionally reported. Such scenarios can be triggered either because there are actually no more valid NORs for that event, e.g., due to a number of resource failures leading to an insufﬁcient number of resources, or because a valid NOR has not been created yet (but eventually will), e.g., due to a

5

quick succession of events.
TABLE 1 Failure scenarios in IPF where an event concerning either BE or SC workload has no associated NOR with a reactive or proactive measure.

ISO 26262, a failure is the termination of the ability of the system or sub-system to perform a function as required [6]. A hazard is a potential source of harm caused by the malfunctioning behaviour of the system, i.e., a system failure [6]. An imminent hazard can then be deﬁned as follows:

BE workload SC workload

Reactive

Proactive

Limited QoS (optional)

Failure report Deferred failure report

2.6 Enterprise Resource Planning (Layer 5)
Finally, the enterprise resource planning is responsible for the long-term planning of the system. That is, developing the future conﬁgurations of the system in the form of NORs. The planning is supported by system information supplied by layers 3 and 4, including the resources and their current operating conditions. Planning also considers the system’s current and previous ORs; current and previous operating conditions; the workload, its QoS goals and non-functional constraints; short-term and long-term factors, such as error rates, energy consumption, aging, and energy constraints; and the different events that may occur at runtime.
The planner is the main entity of this layer. Its main responsibility is to create and maintain the set N of NORs. N is modiﬁed when IPF transitions to a NOR, which requires a new set of NORs, and N is therefore emptied; and when the planner creates a new, valid NOR, in which case a new NOR is added to N . The planner also deﬁnes the valid OPs in ORs – i.e., the conﬁguration ranges in an OR within which IPF’s local autonomous actions and optimization in layer 3 can operate. That is required due to possible coupling between system resources. For example, physical temperature coupling, where the high temperature of a processing resource can affect neighboring resources and increase their error rates.
An OR is a valid conﬁguration range of the system, and therefore the planner only includes a new NOR in the set N if it meets all non-functional requirements of the SC workload. That includes checking the ORs and their OPs with, e.g., system-level performance analysis tools such as Compositional Performance Analysis (CPA) [10]. The planner can take the QoS goals of the BE workload into consideration, but there is no guarantee that the goals will be met in a given OR.
The transitions between different ORs are triggered by different events. Independent of the event, the planner must consider the cost of transitioning between different ORs. Transitions can involve the remapping of workload to containers and the remapping of containers to resources. Remapping requires moving code and data and therefore impacts the response time of the executing workload, which can lead to system-level timing violations (deadline misses). Thus, the planner must also check for system-level timing and safety violations of the transition from the COR to the NOR before the NOR can be included in the set N .
3 IMMINENT HAZARDS
IPF goes beyond conventional hardware faults by addressing imminent hazards. Intuitively, a hazard is a consequence of the system failing to function as expected. From

Deﬁnition 1. Imminent hazard: an increased risk of future errors that can lead to system failure and, therewith, a hazard.
An imminent hazard can be caused by physical causes, environmental conditions, or operating conditions. They can be caused, e.g., by the imminent failure of a resource due to an impending permanent fault. When a permanent fault is close to occur due to aging processes, increasing error rates and intermittent faults are observed [11]. In this case, imminent hazards must be distinguished from latent faults and regular fault occurrences. Imminent hazards can also be caused by error rates for which the system is not dimensioned to tolerate.

4 CONCLUSION
This paper described IPF’s ﬁve-layer hierarchical organization and system conﬁguration framework, and deﬁned the concept of imminent hazards.

ACKNOWLEDGMENTS
We acknowledge ﬁnancial support from the following: NSF Grant CCF-1704859; DFG Grants ER168/32-1 and HE4584/7-1.

REFERENCES

[1] N. Dutt, F. J. Kurdahi, R. Ernst, and A. Herkersdorf, “Conquering

MPSoC complexity with principles of a self-aware information

processing factory,” in Proceedings of the 11th IEEE/ACM/IFIP Inter-

national Conference on Hardware/Software Codesign and System Syn-

thesis (CODES+ISSS), ser. CODES’16, Pittsburgh, Pennsylvania,

Oct 2016.

[2] A. Sadighi, B. Donyanavard, T. Kadeed, K. Moazzemi, T. Mu¨ ck,

A. Nassar, A. M. Rahmani, T. Wild, N. Dutt, R. Ernst, A. Herk-

ersdorf, and F. J. Kurdahi, “Design methodologies for enabling

self-awareness in autonomous systems,” in Proceedings of Design,

Automation and Test in Europe Conference (DATE18), March 2018.

[3] A. Jantsch, N. Dutt, and A. M. Rahmani, “Self-awareness in

systems on chip– a survey,” IEEE Design Test, vol. 34, no. 6, pp.

8–26, Dec 2017.

[4] “ANSI/ISA-95.00.01-2010 (IEC 62264-1 mod) - enterprise-control

system integration - part 1: Models and terminology,” Interna-

tional Society of Automation, 2010.

[5] R. Ernst and M. Di Natale, “Mixed criticality systemsa history of

misconceptions?” IEEE Design Test, vol. 33, no. 5, pp. 65–74, Oct

2016.

[6] “ISO 26262: Road vehicles – functional safety,” International Stan-

dards Organization, 2018.

[7] “IEC

61508:

Functional

safety

of

electri-

cal/electronic/programmable electronic safety-related systems,

ed.2.0,” International Electrotechnical Commission, 2010.

[8] “DO-254: Design assurance guidance for airborne electronic hard-

ware,” RTCA Incorporated, 2000.

[9] J. Zeppenfeld, A. Bouajila, W. Stechele, and A. Herkersdorf,

“Learning classiﬁer tables for autonomic systems on chip.” GI

Jahrestagung (2), vol. 134, pp. 771–778, 2008.

[10] R. Henia, A. Hamann, M. Jersak, R. Racu, K. Richter, and R. Ernst,

“System level performance analysis–the symta/s approach,” IEE

Proceedings-Computers and Digital Techniques, vol. 152, no. 2, pp.

148–166, 2005.

[11] C. Constantinescu, “Trends and challenges in vlsi circuit reliabil-

ity,” IEEE micro, vol. 23, no. 4, pp. 14–19, 2003.

