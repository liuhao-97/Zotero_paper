Session: Mobile Edge Computing

EdgeTech’18, November 2, 2018, New Delhi, India

A Game-Theoretic Approach to Multi-Objective Resource Sharing and Allocation in Mobile Edge
Clouds

Faheem Zafari
Imperial College London

Jian Li
UMass Amherst

Kin K. Leung
Imperial College London

Don Towsley
UMass Amherst
ABSTRACT
Mobile edge computing seeks to provide resources to different delay-sensitive applications. However, allocating the limited edge resources to a number of applications is a challenging problem. To alleviate the resource scarcity problem, we propose sharing of resources among multiple edge computing service providers where each service provider has a particular utility to optimize. We model the resource allocation and sharing problem as a multi-objective optimization problem and present a Cooperative Game Theory (CGT) based framework, where each edge service provider first satisfies its native applications and then shares its remaining resources (if available) with users of other providers. Furthermore, we propose an O(N ) algorithm that provides allocation decisions from the core, hence the obtained allocations are Pareto optimal and the grand coalition of all the service providers is stable. Experimental results show that our proposed resource allocation and sharing framework improves the utility of all the service providers compared with the case where the service providers are working alone (no resource sharing). Our O(N ) algorithm reduces the time complexity of obtaining a solution from the core by as much as 71.67% when compared with the Shapley value.
ACM Reference Format: Faheem Zafari, Jian Li, Kin K. Leung, Don Towsley, and Ananthram Swami. 2018. A Game-Theoretic Approach to Multi-Objective Resource Sharing and Allocation in Mobile Edge Clouds. In EdgeTech ’18: 2018 Technologies for the Wireless Edge Workshop, Nov. 2, 2018, New Delhi, India. ACM, New York, NY, USA, 5 pages. https: //doi.org/10.1145/3266276.3266277
ACM acknowledges that this contribution was authored or co-authored by an employee, contractor, or affiliate of the United States government. As such, the United States government retains a nonexclusive, royalty-free right to publish or reproduce this article, or to allow others to do so, for government purposes only. EdgeTech’18, November 2, 2018, New Delhi, India © 2018 Association for Computing Machinery. ACM ISBN 978-1-4503-5931-3/18/11. . . $15.00 https://doi.org/10.1145/3266276.3266277

Ananthram Swami
U.S. Army Research Laboratory
1 INTRODUCTION
1Mobile edge computing is a viable solution to support resource intensive applications (users). Edge computing relies on edge clouds placed at the edge of any network [1]. This, in contrast with running applications on different mobile devices or deep in the Internet, usually allows one-hop communication [2] between edge clouds and application that results in reducing application latency. However, a fundamental limitation of mobile edge computing is that in contrast with traditional cloud platforms and data centers, edge clouds are limited in resources and may not always be able to satisfy application demands [1]. Realizing the resource scarcity problem, the research community has started several initiatives to create an open edge computing platform where edge clouds in the same geographical location can form a shared resource pool. However, allocating these resources efficiently from the shared pool to different applications in itself is a challenge.
There have been several attempts in the literature to address the resource allocation problem. He et al. [1] studied the allocation of edge resources to different applications by jointly considering request scheduling and service placement. Jia et al. [2] discussed edge cloud placement and allocation of resources to mobile users in the edge cloud in a Wireless Metropolitan Area Network (WMAN). Xu et al. [3] discussed edge cloud placement in a large-scale WMAN that contains multiple wireless access points (APs). However, most work does not account for the fact that edge resources can belong
1This work was supported by the U.S. Army Research Laboratory and the U.K. Ministry of Defence under Agreement Number W911NF-16-3-0001. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the U.S. Army Research Laboratory, the U.S. Government, the U.K. Ministry of Defence or the U.K. Government. The U.S. and U.K. Governments are authorized to reproduce and distribute reprints for Government purposes notwithstanding any copy-right notation hereon. Faheem Zafari also acknowledges the financial support by EPSRC Centre for Doctoral Training in High Performance Embedded and Distributed Systems (HiPEDS, Grant Reference EP/L016796/1), and Department of Electrical and Electronics Engineering, Imperial College London.

9

Session: Mobile Edge Computing

EdgeTech’18, November 2, 2018, New Delhi, India

to different service providers where each service provider can have a particular objective to optimize such as security,

optimization problem with the game theoretic solution. Section 3 presents our experimental results while Section 4 con-

throughput, latency, etc. Therefore creating a resource pool cludes the paper.

and then allocating these resources requires taking different service provider objectives into account, which results in a multi-objective optimization [4] (MOO) problem. Furthermore, each service provider has primary applications that should be prioritized over applications of other service providers as customer loyalty is an important part of the cloud business model. For example, Amazon Web Services (AWS) and Microsoft Azure need to satisfy the demands of their own customers first before they “rent” resources to other service providers.
In this paper, we attempt to address the aforementioned shortcomings. We consider an edge computing setting where different edge clouds belonging to different service providers are placed at the network edge. Each cloud has a specific amount of resources and particular applications affiliated with the cloud can ask for resources. All clouds initially attempt to allocate resources to their own affiliated applications. If a cloud can satisfy its own applications and still have available resources, it can share them with other edge clouds that might need resources. To capture this, we present a Cooperative Game Theory (CGT) based resource sharing and allocation mechanism in which different edge clouds share their resources and form a coalition to satisfy the requests of different applications. Our CGT based framework takes into account the fact that different edge clouds may have different objectives, which is why traditional single objective optimization framework cannot be used. The contributions of this paper are:
(1) We propose a CGT based multi-objective resource sharing and allocation framework for edge clouds in an edge computing setting. We show that the resource sharing and allocation problem can be modeled as a Canonical game. The core of this canonical game is nonempty and the Shapley value [5] lies inside the core. For small number of players, we show numerically that the Shapley value provides a fair, Pareto-optimal and stable2 allocation.
(2) We propose an efficient O(N ) algorithm that provides an allocation from the core, hence reducing the complexity from O(2N ) (for Shapley value).
(3) We evaluate the performance of our proposed framework and show that the resource sharing and allocation mechanism improves the utilities of game players.
The paper is structured as: Section 2 presents our system model. It also presents the resource sharing and allocation
2No service provider has the incentive to leave the coalition and form a smaller coalition.

2 SYSTEM MODEL

Let N = {1, 2, · · · , N } be the set of all the edge clouds that

act as players in our game. We assume that each player has a set of K = {1, 2, · · · , K } different types of resources

such as communication, computation and storage resources.

The n-th edge cloud can report its available resources C(n) =

{C (n
1

)

....CK(n)

}

to

a

central

entity,

the

coalition

controller.

Here

Ck(n) is the amount of resources of type k available to edge

node n. Vector C = {

n

∈

N

C (n ) ,
1

n∈N

C(n), · ·
2

·

,

n ∈N CK(n)}

represents all available resources at different edge clouds.

Each edge cloud n has a set of native applications Mn = {1, 2, · · · , Mn } that ask for resources. Furthermore, the set

of all applications that ask for resources from the set of

edge clouds (coalition of edge clouds) is given by M =

M1 ∪ M2 · · · ∪ MN , where Mi ∩ Mj = ∅, ∀i j, i.e.,

each application asks only one edge cloud for resources. The

coalition controller receives a request (requirement) matrix

R(n) from every player n ∈ N

R(n) =

r(1.n) . .

=

r (n) ··· ··· 1.1 . .

r1(.nK)

. .. .

. .. .

(1)

r(Mn)n

r

(n) Mn

1

···

···

r

(n) Mn

K

where the ith row corresponds to the ith application while

columns represent different resources, i.e., rij is the amount of jth resource that application i ∈ Mn requests. The coali-
tion, based on R and C, has to make an allocation deci-

sion X that optimizes the utilities un(X) of all the edge
clouds n ∈ N . The allocation decision X is a vector X = {X (1), X (2), · · · , X (N )} that indicates how much of each re-

source k ∈ K is allocated to application i at edge cloud

n ∈ N . Mathematically,

X (n) =

x(1.n) . .

=

x (n) ··· ··· 1.1 . .

x1(.nK)

. .. .

. .. .

(2)

x(|M n) |

x

(n) |M|1

···

···

x

(n) |M|K

where xi(kn) is the amount of resource k ∈ K belonging to player n that is allocated to application i.

2.1 Optimization Problem

In this section, we first present the resource allocation prob-

lem for a single edge cloud (no resource sharing with other

edge clouds). Then we present the MOO problem for the

coalition. For a single edge cloud n ∈ N , the allocation decision matrix XS(nO), where SO stands for single objective

optimization, is given by

X

(n) SO

=

t x(1n) . . . x(Mn)n

(3)

The optimization problem is given below:

2

10

Session: Mobile Edge Computing

EdgeTech’18, November 2, 2018, New Delhi, India

max
X S(nO)

un (XS(nO) )

(4a)

s.t.

xi(kn) ≤ Ck(n), ∀k ∈ K,

(4b)

i ∈Mn

xi(kn) ≤ ri(kn), ∀ i ∈ Mn, k ∈ K,

(4c)

xi(kn) ≥ 0, ∀ i ∈ Mn, k ∈ K.

(4d)

The above optimization problem captures the goal of ev-

ery single edge cloud i.e., maximizing its utility by allocating its available resources to its native applications3. The

first constraint (4b) indicates that resources allocated to all users i ∈ Mn cannot exceed capacity. The second constraint (4c) indicates allocated resources cannot exceed required

resources while the final constraint (4d) requires the allo-

cations to be non-negative. For the cooperative case where

edge clouds work in cooperation with other edge clouds, we

aim to maximize the utility of our coalition in (5):

max wnun(X) + ζn
X

u

n j

(X)

∀n ∈ N

(5a)

j ∈N, j n

s.t.

xi(kn) ≤ Ck(n), ∀k ∈ K, ∀n ∈ N ,

(5b)

i ∈M

xi(kj) ≤ ri(kn), ∀ i ∈ M, k ∈ K, n ∈ N , (5c)
j ∈N

xi(kn) ≥ 0, ∀ i ∈ M, k ∈ K, n ∈ N .

(5d)

Here un(X) in (5) indicates the utility that an edge cloud receives by providing its resources to applications in Mn. Remaining available resources at edge cloud n can be used by applications of other edge clouds j ∈ N \n that will be

It is highly unlikely that the utility of any edge cloud will de-

crease with an increase in the amount of resources allocated.

Since the utility function used is monotone non-decreasing,

the game is convex. The core of any convex game is large

and contains the Shapley value [6]. Our goal is to obtain an

allocation from the core as all allocations in the core guar-

antee Pareto optimality and stability of the grand coalition

i.e. the allocation decision obtained is Pareto optimal and

no player (edge cloud) will have the incentive to leave the

grand coalition. We first use the Shapley value, that requires solving 2N − 1 optimization problems, to obtain an allocation

from the core and then propose a computationally efficient

algorithm that can provide us an allocation from the core

but does not provide the fairness of the Shapley value.

v(N ) =

wnun(X) + ζn

unj (X)

(6)

n∈N

j ∈N, j n

Algorithm 1 provides an overview of our proposed ap-

proach. We calculate the Shapley value for the players and assign it to u(R, X). Finally to obtain X, we take the inverse function of u. As we are using monotonic utilities, we know

that the inverses of the utilities exist. A fundamental issue

with the Shapley value is its complexity. This motivates de-

veloping a more efficient algorithm to obtain an allocation

from the core.
2.3 Reducing the Computational

Complexity

To reduce computational complexity, we propose an algo-
rithm (Algorithm 2) that requires solving only 2N optimization problems rather than 2N .

Algorithm 1 Shapley Value based Resource Allocation

charged at a rate that edge cloud (each edge cloud acts as

a player in our cooperative game) j would have charged

the application i ∈ Mj had the request been satisfied by

edge

cloud

j.

Hence

u

n j

(X)

is

the

utility

that

edge

cloud

n

receives for sharing its resources with edge cloud j. wn is the

weight assigned to the utility of player n. ζn is the weight

assigned

to

the

utility

u

n j

(X).

The

purpose

of

the

weights

is

to highlight that each edge cloud first allocates resources to

its own applications and then shares the remaining resources

with other edge clouds.
2.2 Game Theoretic Solution

The characteristic function v for our game that solves prob-

lem in (5) is given in (6). We model the resource allocation

and sharing problem (with multiple objectives) in the afore-

mentioned settings as a canonical cooperative game with
transferable utility. We choose a monotone non-decreasing utility function for our resource allocation and sharing frame-

work. This is because in edge computing, the more resources

provided, the higher is the gain or utility for the edge cloud.

Input: R, C, and vector of utility functions of all players
u
Output: X Step 1: u(R, X) ←0, X ←0, ϕ ←0, Step 1: Calculate Shapley Value ϕn ∀n ∈ N Step 2: u(R, X) ← ϕ Step 3: X ← u−1

max
X

u

n j

(X)

∀n ∈ N

jn

(7a)

s.t.

xi(kn) ≤ Ck(n), ∀k ∈ K,

(7b)

i ∈M\Mn

xi(kn) ≤ Ri(nk), ∀ i ∈ M\Mn, k ∈ K,

(7c)

xi(kn) ≥ 0, ∀ i ∈ M\Mn, k ∈ K.

(7d)

Theorem 1. The solution obtained from Algorithm 2 lies in the core.
Proof. We need to show that the utilities obtained in Step

5 of Algorithm 2: a) are individually rational. b) are group

3Applications that are primarily affiliated with the edge cloud.

rational, and c) no player has the incentive to leave the grand coalition and form another coalition S ⊂ N .

3

11

Session: Mobile Edge Computing

EdgeTech’18, November 2, 2018, New Delhi, India

Algorithm 2 O(N ) algorithm for obtaining Core’s allocation

Input: R, C, and vector of utility functions of all players
u Output: X Step 1: u(R, X) ←0, X ←0, O1 ←0, O2 ←0, Step 2: for n ∈ N do
On ← Solution of the optimization problem
1
in Equation (4)

end for Step 3: Update R, C based on Step 2
Step 4: for n ∈ N do
On ← Solution of the optimization problem
2
in Equation (7) with updated R and C Update R and C

end for

Step

5:

un (R,

X)

←

On
1

+

On
2

∀n

∈

N

Step 6: X ← u−1

Table 1: Utility (Pay-off) for different coalitions with

µ = 0.01, N = 3, Mn = 3

Coalition

Player Utilities

P1

P2

P3

Coalition Utility

{1}

36 0 0 36

{2}

0 4.37 0 4.37

{3}

0 0 4.31 4.31

{12}

40.17 4.375 0 44.545

{13}

40.31 0 4.313 44.623

{23}

0 8.68 8.68 17.37

{123} O(N ) 44.68 8.68 8.68 62.06

{123} (S.V.) 40.34 10.90 10.81 62.06

µ is chosen to be either 0.01 or 10 to capture the requirements of different applications. The request matrix R(n) and capacity vector C(n) for each player n ∈ N were randomly generated.
The experiments were run in Matlab R2016b on Core-i7
processor with 16 GB RAM. The optimization problems were
solved using the OPTI-toolbox.

Individual Rationality: For each player n ∈ N , the solution On obtained by solving the optimization problem in (4) is
1
the utility a player obtains by working alone i.e. it is v{n}. The value On in Step 4 is either zero or positive but cannot
2
be negative due to the nature of utility used i.e.

un(R, X)

=

On
1

+

On
2

≥

On,
1

∀n ∈ N .

Group Rationality: The value of the grand coalition v{N } as per (6) is the sum of utilities un’s and unj ’s. Steps 2, 4
and 5 of Algorithm 2 obtain the sum of the utilities as well.

Hence the solution obtained as a result of Algorithm 2 is

group rational. Furthermore, due to super-additivity of the

game and monotone non-decreasing nature of the utilities,

no player has the incentive to form a smaller coalition. Hence

Algorithm 2 provides a solution from the core.

□

3 EXPERIMENTAL RESULTS

To evaluate the performance of the proposed resource shar-

ing and allocation mechanism, we consider a set of game play-

ers where each player has three different types of resources

i.e., storage, communication and computation. Without loss

of generality (W.l.o.g), the model can be extended to include

other types of resources/parameters as well. We present re-
sults for four different settings with 1) N = 3, Mn = 3, ∀n ∈ N ; 2) N = 3, Mn = 20, ∀n ∈ N ; 3) N = 3, Mn = 100, ∀n ∈ N ; and 4) N = 10, Mn = 20, ∀n ∈ N . We used linear and
sigmoidal utilities (see (8)) for all the players. However, the

results hold for any monotone non-decreasing utility.

un(X) =
i ∈Mn

K
1 k =1 1 + e −µ(xi(nk)−Ri(nk))

∀n ∈ N . (8)

3.1 Value of Coalition
Table 1 shows the utilities of different players in a 3 player-3
application setting. Player one was assigned a linear util-
ity while player two and three had sigmoidal utilities. It is
evident from the table that the utility of the coalition im-
proves when more players are added. The grand coalition
has the highest utility, verifying the superadditive nature
of the game. The last row shows the Shapley Values (S.V.) for the grand coalition. Our O(N ) (alg2 in Figure 1) provides the same value of coalition as Shapley value (due to Pareto
optimality), however players are assigned different utilities
in the coalition. Figure 1 shows the value of coalition for 3 players, and 3, 10 and 100 applications with µ set to 0.01 and 100. The grand coalition achieves the highest coalition utility for all three cases. As a higher value of µ (i.e., the slope of the sigmoidal function is steep) puts a stringent
requirement on the edge clouds to satisfy requests of the
applications if it is to gain any utility, we see that that the overall value of coalition is smaller for µ = 10 when compared with µ = 0.01. Figure 2 shows the utility of a player without resource sharing and with resource sharing in the grand coalition in varying experimental settings (µ = 0.01, µ = 10, Mn = 20, and Mn = 100). We show the utility of the player in the grand coalition both using Shapley value (SV) and our O(N ) algorithm (alg2 in Figure). Similar trends are observed in Figure 3. However, we do not calculate the Shapley value for N = 10 and Mn = 20 due to the computational complexity and the utility of the players in the grand
coalition is obtained using Algorithm 2. It is evident that
all the players’ utilities improve by sharing resources and
taking part in the cooperative game.

4

12

Session: Mobile Edge Computing

EdgeTech’18, November 2, 2018, New Delhi, India

Utility

800 600 400 200
0 {1}
80
60
40

Value of Coalition with =0.01
3 applications 20 applications 100 applications

{2}

{3}

{12}

{13}

{23}

Coalition

Value of Coalition with =10

3 applications 20 applications 100 applications

{123}(SV) {123}Alg2

20

0

{1}

{2}

{3}

{12}

{13}

{23} {123}(SV) {123}Alg2

Coalition

Utility

Figure 1: Value of Coalition for 3 players, and 3, 20 and 100 applications with µ = 0.01 and µ = 10

No sharing ( =0.01)

Grand coalition ( =0.01)

No sharing ( =10)

Grand coalition ( =10)

300

Utility

200

100

0

1

2

3

4

5

6

7

8

9

10

Player

Figure 3: Player utilities with and without resource sharing in grand coalition for N = 10 and M = 20

Time (seconds)

600 500 400 300 200 100
0
104 4
3
2

S.V. with =0.01 Algorithm 2 with S.V. with =10 Algorithm 2 with

=0.01 =10

3-3

Player-Applications

3-20

S.V. with =0.01 Algorithm 2 with S.V. with =10 Algorithm 2 with

=0.01 =10

Time (seconds)

1 No sharing with =0.01, M=20

350

SV with =0.01, M=20

Alg2 with =0.01, M=20

0

No sharing with =10, M=20 300
SV with =10, M=20

3-100
Player-Applications

Alg2 with =10, M=20

Figure 4: Comparison of time Complexity

250

No sharing with =0.01, M=100

SV with =0.01, M=100

affiliated with edge clouds. Our resource allocation and shar-

Alg2 with =0.01, M=100

200

No sharing with =10, M=100

ing game is canonical and convex. The core for the game is

SV with =10, M=100 Alg2 with =10, M=100

non-empty, hence the grand coalition is stable and Shapley

150
value also lies in the core. Furthermore, due to computational

Utility

complexity of calculating Shapley value, we presented an
100
O(N ) algorithm that can provide an allocation and sharing

50

decision from the core. Experimental results showed that

0

1

2

3

Player

Figure 2: Utilities in different settings without and

with resource sharing in grand coalition for N = 3
3.2 Time complexity

Computational complexity of the Shapley value is high, which is why it cannot be used for a large number of players. We compared the performance of our O(N ) algorithm with the Shapley value based allocation (given in Algorithm 1) in a 3-player game with different number of applications. Experimental results showed that Algorithm 2 reduces the computation time by as large as 71.67% and as small as 26.6% while the average improvement was about 49.75%. Figure 4 shows the calculation time for different user-application settings with varying µ. We see that in all the settings, our proposed algorithm outperforms the Shapley value based allocation.
4 CONCLUSIONS

We proposed a cooperative game theory based resource allocation and sharing framework for edge computing that can efficiently allocate resources to different applications

edge clouds can improve their utility by using our proposed resource allocation mechanism and our O(N ) algorithm can provide us an allocation from the core (guarantee of Pareto
optimality and stability) in a shorter time than the Shapley
value.
REFERENCES
[1] Ting He, Hana Khamfroush, Shiqiang Wang, Tom La Porta, and Se-
bastian Stein. It’s Hard to Share: Joint Service Placement and Request
Scheduling in Edge Clouds with Sharable and Non-sharable Resources.
2018. To appear in IEEE ICDCS.
[2] Mike Jia, Jiannong Cao, and Weifa Liang. Optimal Cloudlet Placement
and User to Cloudlet Allocation in Wireless Metropolitan Area Networks. IEEE Transactions on Cloud Computing, 2015. [3] Zichuan Xu, Weifa Liang, Wenzheng Xu, Mike Jia, and Song Guo. Efficient Algorithms for Capacitated Cloudlet Placements. IEEE Transactions on Parallel and Distributed Systems, 27(10):2866–2880, 2016. [4] Jin-Hee Cho, Yating Wang, Ray Chen, Kevin S Chan, and Ananthram
Swami. A Survey on Modeling and Optimizing Multi-Objective Systems. IEEE Communications Surveys & Tutorials, 19(3):1867–1901, 2017. [5] Lloyd S Shapley. A Value for N-Person Games. Contributions to the Theory of Games, 2(28):307–317, 1953. [6] Zhu Han. Game Theory in Wireless and Communication Networks: Theory, Models, and Applications. Cambridge University Press, 2012.

5

13

